Cliente(
	id_cli integer, 
	CPF varchar, 
	Nome varchar, 
	data_reg date, 
	valor_max_liberado integer
);
Emprestimo(
	id_empr integer, 
	data_empr date,
	valor_total integer, 
	nro_parcelas integer, 
	quitado integer,  
	FK_id_cli integer
);
1)
CREATE OR REPLACE FUNCTION ID_CLIENTE (NOME VARCHAR )
RETURNS INTEGER AS $$
DECLARE 
	ID_CLIENTE CLIENTE.ID_CLI%TYPE;
	BEGIN
		SELECT ID_CLI INTO STRICT ID_CLIENTE FROM 
		CLIENTE AS C WHERE LOWER(C.NOME)=LOWER(NOME);
		RETURN ID_CLIENTE;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RAISE NOTICE 'CLIENTE NÃO EXISTE';
		WHEN TOO_MANY_ROWS THEN
			RAISE NOTICE 'EXISTE MAIS DE UM CLIENTE COM ESSE NOME';
	END;
$$ LANGUAGE PLPGSQL;
------------------------------------------------------------------------------
2)

CREATE OR REPLACE FUNCTION TOTAL_EMPRESTIMOS (ID_CLI INTEGER)
RETURNS INTEGER AS $$
DECLARE
	TOTAL_DEVIDO INTEGER;
	BEGIN
		SELECT SUM(E.VALOR_TOTAL - E.QUITADO) 
		INTO TOTAL_DEVIDO
		FROM CLIENTE C , EMPRESTIMO E WHERE
		C.ID_CLI = E.ID_CLI and ID_CLI= C.ID_CLI
		RETURN TOTAL_DEVIDO;
	END;
$$ LANGUAGE PLPGSQL;


------------------------------------------------------------------------------
3)

CREATE OR REPLACE FUNCTION DATA_REGISTRO(INTEGER ID_CLI)
RETURNS DATE AS $$
DECLARE 
	DATA_REGISTRO CLIENTE.DATA_REG%TYPE;
	BEGIN
		SELECT DATA_REG INTO STRICT DATA_REGISTRO
		FROM CLIENTE C
		WHERE C.ID_CLI = ID_CLI;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RAISE NOTICE 'CLIENTE NÃO EXISTE';
	END;
LANGUAGE PLPGSQL;

------------------------------------------------------------------------------
4)

CREATE OR REPLACE FUNCTION ATUALIZA_VALOR(CPF VARCHAR,NOVO_VALOR INTEGER)
RETURNS VOID AS $$
	BEGIN
		UPDATE CLIENTE C SET C.VALOR_MAX_LIBERADO = NOVO_VALOR
		WHERE C.CPF = CPF;
		return;
	END;
LANGUAGE PLPGSQL;	

------------------------------------------------------------------------------

5)

CREATE OR REPLACE FUNCTION QUITA_EMPRESTIMO(ID_EMPRE INTEGER)
RETURNS VOID AS $$
	BEGIN
		UPDATE EMPRESTIMO E SET E.QUITADO = E.VALOR_TOTAL
		WHERE E.ID_EMPRE = ID_EMPRE;
	END;
$$ LANGUAGE PLPGSQL;


------------------------------------------------------------------------------
6)

CREATE OR REPLACE FUNCTION EMPRESTIMO_ANTIGO(ID_CLI INTEGER)
RETURNS DECIMAL AS $$
DECLARE 
	VALOR_TOTAL EMPRESTIMO.VALOR_TOTAL;
	
	BEGIN
		SELECT E.VALOR_TOTAL INTO VALOR_TOTAL
		FROM EMPRESTIMO E
		WHERE ID_CLI = E.ID_CLI AND E.VALOR_TOTAL <> E.QUITADO
		AND E.DATA_EMPR = 
		(SELECT MIN(E.DATA_EMPRE) FROM EMPRESTIMO E
		WHERE E.ID_CLI = ID_CLI AND E.QUITADO <> E.VALOR_TOTAL)
	END;
LANGUAGE PLPGSQL;
